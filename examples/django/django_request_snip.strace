11024 recv(5, "GET / HTTP/1.1\r\nHost: localhost:8000\r\nUser-Agent: curl/7.47.0\r\nAccept: */*\r\n\r\n", 8192, 0) = 78
11024 stat64("/usr/local/lib/python2.7/dist-packages/django/contrib/sessions/serializers", 0xb63bb48c) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/sessions/serializers.i386-linux-gnu.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/sessions/serializers.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/sessions/serializersmodule.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/sessions/serializers.py", O_RDONLY|O_LARGEFILE) = 6
11024 fstat64(6, {st_dev=makedev(8, 1), st_ino=566128, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=50, st_blksize=4096, st_blocks=8, st_size=488, st_atime=2018/04/23-18:55:33.383855188, st_mtime=2018/04/23-18:05:33.143285000, st_ctime=2018/04/23-18:05:35.643197393}) = 0
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/sessions/serializers.pyc", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 fstat64(6, {st_dev=makedev(8, 1), st_ino=566128, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=50, st_blksize=4096, st_blocks=8, st_size=488, st_atime=2018/04/23-18:55:33.383855188, st_mtime=2018/04/23-18:05:33.143285000, st_ctime=2018/04/23-18:05:35.643197393}) = 0
11024 read(6, "from django.core.signing import JSONSerializer as BaseJSONSerializer\n\ntry:\n    from django.utils.six.moves import cPickle as pickle\nexcept ImportError:\n    import pickle\n\n\nclass PickleSerializer(object):\n    \"\"\"\n    Simple wrapper around pickle to be used in signing.dumps and\n    signing.loads.\n    \"\"\"\n    def dumps(self, obj):\n        return pickle.dumps(obj, pickle.HIGHEST_PROTOCOL)\n\n    def loads(self, data):\n        return pickle.loads(data)\n\n\nJSONSerializer = BaseJSONSerializer\n", 4096) = 488
11024 read(6, "", 4096)                 = 0
11024 unlink("/usr/local/lib/python2.7/dist-packages/django/contrib/sessions/serializers.pyc") = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/sessions/serializers.pyc", O_WRONLY|O_CREAT|O_EXCL|O_TRUNC|O_LARGEFILE, 0100644) = -1 EACCES (Permission denied)
11024 close(6)                          = 0
11024 stat64("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/fallback", 0xb63ba2cc) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/fallback.i386-linux-gnu.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/fallback.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/fallbackmodule.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/fallback.py", O_RDONLY|O_LARGEFILE) = 6
11024 fstat64(6, {st_dev=makedev(8, 1), st_ino=566573, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=50, st_blksize=4096, st_blocks=8, st_size=2172, st_atime=2018/04/23-18:55:33.391855599, st_mtime=2018/04/23-18:05:33.115286000, st_ctime=2018/04/23-18:05:35.995184927}) = 0
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/fallback.pyc", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 fstat64(6, {st_dev=makedev(8, 1), st_ino=566573, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=50, st_blksize=4096, st_blocks=8, st_size=2172, st_atime=2018/04/23-18:55:33.391855599, st_mtime=2018/04/23-18:05:33.115286000, st_ctime=2018/04/23-18:05:35.995184927}) = 0
11024 read(6, "from django.contrib.messages.storage.base import BaseStorage\nfrom django.contrib.messages.storage.cookie import CookieStorage\nfrom django.contrib.messages.storage.session import SessionStorage\n\n\nclass FallbackStorage(BaseStorage):\n    \"\"\"\n    Tries to store all messages in the first backend, storing any unstored\n    messages in each subsequent backend backend.\n    \"\"\"\n    storage_classes = (CookieStorage, SessionStorage)\n\n    def __init__(self, *args, **kwargs):\n        super(FallbackStorage, self).__init__(*args, **kwargs)\n        self.storages = [storage_class(*args, **kwargs)\n                         for storage_class in self.storage_classes]\n        self._used_storages = set()\n\n    def _get(self, *args, **kwargs):\n        \"\"\"\n        Gets a single list of messages from all storage backends.\n        \"\"\"\n        all_messages = []\n        for storage in self.storages:\n            messages, all_retrieved = storage._get()\n            # If the backend hasn't been used, no more retrieval is necessary.\n            if messages is None:\n                break\n            if messages:\n                self._used_storages.add(storage)\n            all_messages.extend(messages)\n            # If this storage class contained all the messages, no further\n            # retrieval is necessary\n            if all_retrieved:\n                break\n        return all_messages, all_retrieved\n\n    def _store(self, messages, response, *args, **kwargs):\n        \"\"\"\n        Stores the messages, returning any unstored messages after trying all\n        backends.\n\n        For each storage backend, any messages not stored are passed on to the\n        next backend.\n        \"\"\"\n        for storage in self.storages:\n            if messages:\n                messages = storage._store(messages, response,\n                                          remove_oldest=False)\n            # Even if there are no more messages, continue iterating to ensure\n            # storages which contained messages are flushed.\n            elif storage in self._used_storages:\n                storage._store([], response)\n                self._used_storages.remove(storage)\n        return messages\n", 4096) = 2172
11024 read(6, "", 4096)                 = 0
11024 unlink("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/fallback.pyc") = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/fallback.pyc", O_WRONLY|O_CREAT|O_EXCL|O_TRUNC|O_LARGEFILE, 0100644) = -1 EACCES (Permission denied)
11024 stat64("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/base", 0xb63b9f1c) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/base.i386-linux-gnu.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/base.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/basemodule.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/base.py", O_RDONLY|O_LARGEFILE) = 7
11024 fstat64(7, {st_dev=makedev(8, 1), st_ino=566571, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=50, st_blksize=4096, st_blocks=16, st_size=6263, st_atime=2018/04/23-18:55:33.391855599, st_mtime=2018/04/23-18:05:33.115286000, st_ctime=2018/04/23-18:05:35.995184927}) = 0
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/base.pyc", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 fstat64(7, {st_dev=makedev(8, 1), st_ino=566571, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=50, st_blksize=4096, st_blocks=16, st_size=6263, st_atime=2018/04/23-18:55:33.391855599, st_mtime=2018/04/23-18:05:33.115286000, st_ctime=2018/04/23-18:05:35.995184927}) = 0
11024 read(7, "from __future__ import unicode_literals\n\nfrom django.conf import settings\nfrom django.contrib.messages import constants, utils\nfrom django.utils.encoding import force_text, python_2_unicode_compatible\n\nLEVEL_TAGS = utils.get_level_tags()\n\n\n@python_2_unicode_compatible\nclass Message(object):\n    \"\"\"\n    Represents an actual message that can be stored in any of the supported\n    storage classes (typically session- or cookie-based) and rendered in a view\n    or template.\n    \"\"\"\n\n    def __init__(self, level, message, extra_tags=None):\n        self.level = int(level)\n        self.message = message\n        self.extra_tags = extra_tags\n\n    def _prepare(self):\n        \"\"\"\n        Prepares the message for serialization by forcing the ``message``\n        and ``extra_tags`` to unicode in case they are lazy translations.\n\n        Known \"safe\" types (None, int, etc.) are not converted (see Django's\n        ``force_text`` implementation for details).\n        \"\"\"\n        self.message = force_text(self.message, strings_only=True)\n        self.extra_tags = force_text(self.extra_tags, strings_only=True)\n\n    def __eq__(self, other):\n        return isinstance(other, Message) and self.level == other.level and \\\n            self.message == other.message\n\n    def __str__(self):\n        return force_text(self.message)\n\n    @property\n    def tags(self):\n        extra_tags = force_text(self.extra_tags, strings_only=True)\n        if extra_tags and self.level_tag:\n            return ' '.join([extra_tags, self.level_tag])\n        elif extra_tags:\n            return extra_tags\n        elif self.level_tag:\n            return self.level_tag\n        return ''\n\n    @property\n    def level_tag(self):\n        return force_text(LEVEL_TAGS.get(self.level, ''), strings_only=True)\n\n\nclass BaseStorage(object):\n    \"\"\"\n    This is the base backend for temporary message storage.\n\n    This is not a complete class; to be a usable storage backend, it must be\n    subclassed and the two methods ``_get`` and ``_store`` overridden.\n    \"\"\"\n\n    def __init__(self, request, *args, **kwargs):\n        self.request = request\n        self._queued_messages = []\n        self.used = False\n        self.added_new = False\n        super(BaseStorage, self).__init__(*args, **kwargs)\n\n    def __len__(self):\n        return len(self._loaded_messages) + len(self._queued_messages)\n\n    def __iter__(self):\n        self.used = True\n        if self._queued_messages:\n            self._loaded_messages.extend(self._queued_messages)\n            self._queued_messages = []\n        return iter(self._loaded_messages)\n\n    def __contains__(self, item):\n        return item in self._loaded_messages or item in self._queued_messages\n\n    @property\n    def _loaded_messages(self):\n        \"\"\"\n        Returns a list of loaded messages, retrieving them first if they have\n        not been loaded yet.\n        \"\"\"\n        if not hasattr(self, '_loaded_data'):\n            messages, all_retrieved = self._get()\n            self._loaded_data = messages or []\n        return self._loaded_data\n\n    def _get(self, *args, **kwargs):\n        \"\"\"\n        Retrieves a list of stored messages. Returns a tuple of the messages\n        and a flag indicating whether or not all the messages originally\n        intended to be stored in this storage were, in fact, stored and\n        retrieved; e.g., ``(messages, all_retrieved)``.\n\n        **This method must be implemented by a subclass.**\n\n        If it is possible to tell if the backend was not used (as opposed to\n        just containing no messages) then ``None`` should be returned in\n        place of ``messages``.\n        \"\"\"\n        raise NotImplementedError('subclasses of BaseStorage must provide a _get() method')\n\n    def _store(self, messages, response, *args, **kwargs):\n        \"\"\"\n        Stores a list of messages, returning a list of any messages which could\n        not be stored.\n\n        One type of object must be able to be stored, ``Message``.\n\n        **This method must be implemented by a subclass.**\n        \"\"\"\n        raise NotImplementedError('subclasses of Bas", 4096) = 4096
11024 read(7, "eStorage must provide a _store() method')\n\n    def _prepare_messages(self, messages):\n        \"\"\"\n        Prepares a list of messages for storage.\n        \"\"\"\n        for message in messages:\n            message._prepare()\n\n    def update(self, response):\n        \"\"\"\n        Stores all unread messages.\n\n        If the backend has yet to be iterated, previously stored messages will\n        be stored again. Otherwise, only messages added after the last\n        iteration will be stored.\n        \"\"\"\n        self._prepare_messages(self._queued_messages)\n        if self.used:\n            return self._store(self._queued_messages, response)\n        elif self.added_new:\n            messages = self._loaded_messages + self._queued_messages\n            return self._store(messages, response)\n\n    def add(self, level, message, extra_tags=''):\n        \"\"\"\n        Queues a message to be stored.\n\n        The message is only queued if it contained something and its level is\n        not less than the recording level (``self.level``).\n        \"\"\"\n        if not message:\n            return\n        # Check that the message level is not less than the recording level.\n        level = int(level)\n        if level < self.level:\n            return\n        # Add the message.\n        self.added_new = True\n        message = Message(level, message, extra_tags=extra_tags)\n        self._queued_messages.append(message)\n\n    def _get_level(self):\n        \"\"\"\n        Returns the minimum recorded level.\n\n        The default level is the ``MESSAGE_LEVEL`` setting. If this is\n        not found, the ``INFO`` level is used.\n        \"\"\"\n        if not hasattr(self, '_level'):\n            self._level = getattr(settings, 'MESSAGE_LEVEL', constants.INFO)\n        return self._level\n\n    def _set_level(self, value=None):\n        \"\"\"\n        Sets a custom minimum recorded level.\n\n        If set to ``None``, the default level will be used (see the\n        ``_get_level`` method).\n        \"\"\"\n        if value is None and hasattr(self, '_level'):\n            del self._level\n        else:\n            self._level = int(value)\n\n    level = property(_get_level, _set_level, _set_level)\n", 4096) = 2167
11024 read(7, "", 4096)                 = 0
11024 unlink("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/base.pyc") = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/base.pyc", O_WRONLY|O_CREAT|O_EXCL|O_TRUNC|O_LARGEFILE, 0100644) = -1 EACCES (Permission denied)
11024 stat64("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/__future__", 0xb63b9b6c) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/__future__.i386-linux-gnu.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/__future__.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/__future__module.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/__future__.py", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/__future__.pyc", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 stat64("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/utils", 0xb63b9b2c) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/utils.i386-linux-gnu.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/utils.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/utilsmodule.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/utils.py", O_RDONLY|O_LARGEFILE) = 8
11024 fstat64(8, {st_dev=makedev(8, 1), st_ino=566556, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=50, st_blksize=4096, st_blocks=8, st_size=285, st_atime=2018/04/23-18:55:33.403856215, st_mtime=2018/04/23-18:05:33.115286000, st_ctime=2018/04/23-18:05:35.991185069}) = 0
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/utils.pyc", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 fstat64(8, {st_dev=makedev(8, 1), st_ino=566556, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=50, st_blksize=4096, st_blocks=8, st_size=285, st_atime=2018/04/23-18:55:33.403856215, st_mtime=2018/04/23-18:05:33.115286000, st_ctime=2018/04/23-18:05:35.991185069}) = 0
11024 read(8, "from django.conf import settings\nfrom django.contrib.messages import constants\n\n\ndef get_level_tags():\n    \"\"\"\n    Returns the message level tags.\n    \"\"\"\n    level_tags = constants.DEFAULT_TAGS.copy()\n    level_tags.update(getattr(settings, 'MESSAGE_TAGS', {}))\n    return level_tags\n", 4096) = 285
11024 read(8, "", 4096)                 = 0
11024 unlink("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/utils.pyc") = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/utils.pyc", O_WRONLY|O_CREAT|O_EXCL|O_TRUNC|O_LARGEFILE, 0100644) = -1 EACCES (Permission denied)
11024 close(8)                          = 0
11024 close(7)                          = 0
11024 stat64("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/cookie", 0xb63b9f1c) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/cookie.i386-linux-gnu.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/cookie.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/cookiemodule.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/cookie.py", O_RDONLY|O_LARGEFILE) = 7
11024 fstat64(7, {st_dev=makedev(8, 1), st_ino=566567, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=50, st_blksize=4096, st_blocks=16, st_size=6560, st_atime=2018/04/23-18:55:33.411856626, st_mtime=2018/04/23-18:05:33.115286000, st_ctime=2018/04/23-18:05:35.995184927}) = 0
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/cookie.pyc", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 fstat64(7, {st_dev=makedev(8, 1), st_ino=566567, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=50, st_blksize=4096, st_blocks=16, st_size=6560, st_atime=2018/04/23-18:55:33.411856626, st_mtime=2018/04/23-18:05:33.115286000, st_ctime=2018/04/23-18:05:35.995184927}) = 0
11024 read(7, "import json\n\nfrom django.conf import settings\nfrom django.contrib.messages.storage.base import BaseStorage, Message\nfrom django.http import SimpleCookie\nfrom django.utils import six\nfrom django.utils.crypto import constant_time_compare, salted_hmac\nfrom django.utils.safestring import SafeData, mark_safe\n\n\nclass MessageEncoder(json.JSONEncoder):\n    \"\"\"\n    Compactly serializes instances of the ``Message`` class as JSON.\n    \"\"\"\n    message_key = '__json_message'\n\n    def default(self, obj):\n        if isinstance(obj, Message):\n            # Using 0/1 here instead of False/True to produce more compact json\n            is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n            message = [self.message_key, is_safedata, obj.level, obj.message]\n            if obj.extra_tags:\n                message.append(obj.extra_tags)\n            return message\n        return super(MessageEncoder, self).default(obj)\n\n\nclass MessageDecoder(json.JSONDecoder):\n    \"\"\"\n    Decodes JSON that includes serialized ``Message`` instances.\n    \"\"\"\n\n    def process_messages(self, obj):\n        if isinstance(obj, list) and obj:\n            if obj[0] == MessageEncoder.message_key:\n                if len(obj) == 3:\n                    # Compatibility with previously-encoded messages\n                    return Message(*obj[1:])\n                if obj[1]:\n                    obj[3] = mark_safe(obj[3])\n                return Message(*obj[2:])\n            return [self.process_messages(item) for item in obj]\n        if isinstance(obj, dict):\n            return {key: self.process_messages(value)\n                    for key, value in six.iteritems(obj)}\n        return obj\n\n    def decode(self, s, **kwargs):\n        decoded = super(MessageDecoder, self).decode(s, **kwargs)\n        return self.process_messages(decoded)\n\n\nclass CookieStorage(BaseStorage):\n    \"\"\"\n    Stores messages in a cookie.\n    \"\"\"\n    cookie_name = 'messages'\n    # uwsgi's default configuration enforces a maximum size of 4kb for all the\n    # HTTP headers. In order to leave some room for other cookies and headers,\n    # restrict the session cookie to 1/2 of 4kb. See #18781.\n    max_cookie_size = 2048\n    not_finished = '__messagesnotfinished__'\n\n    def _get(self, *args, **kwargs):\n        \"\"\"\n        Retrieves a list of messages from the messages cookie.  If the\n        not_finished sentinel value is found at the end of the message list,\n        remove it and return a result indicating that not all messages were\n        retrieved by this storage.\n        \"\"\"\n        data = self.request.COOKIES.get(self.cookie_name)\n        messages = self._decode(data)\n        all_retrieved = not (messages and messages[-1] == self.not_finished)\n        if messages and not all_retrieved:\n            # remove the sentinel value\n            messages.pop()\n        return messages, all_retrieved\n\n    def _update_cookie(self, encoded_data, response):\n        \"\"\"\n        Either sets the cookie with the encoded data if there is any data to\n        store, or deletes the cookie.\n        \"\"\"\n        if encoded_data:\n            response.set_cookie(\n                self.cookie_name, encoded_data,\n                domain=settings.SESSION_COOKIE_DOMAIN,\n                secure=settings.SESSION_COOKIE_SECURE or None,\n                httponly=settings.SESSION_COOKIE_HTTPONLY or None,\n            )\n        else:\n            response.delete_cookie(self.cookie_name, domain=settings.SESSION_COOKIE_DOMAIN)\n\n    def _store(self, messages, response, remove_oldest=True, *args, **kwargs):\n        \"\"\"\n        Stores the messages to a cookie, returning a list of any messages which\n        could not be stored.\n\n        If the encoded data is larger than ``max_cookie_size``, removes\n        messages until the data fits (these are the messages which are\n        returned), and add the not_finished sentinel value to indicate as much.\n        \"\"\"\n        unstored_messages = []\n        encoded_data = self._encode(messages)\n        if self.max_cookie_size:\n            # data is going to be stored eventually by SimpleCookie, which\n", 4096) = 4096
11024 read(7, "            # adds its own overhead, which we must account for.\n            cookie = SimpleCookie()  # create outside the loop\n\n            def stored_length(val):\n                return len(cookie.value_encode(val)[1])\n\n            while encoded_data and stored_length(encoded_data) > self.max_cookie_size:\n                if remove_oldest:\n                    unstored_messages.append(messages.pop(0))\n                else:\n                    unstored_messages.insert(0, messages.pop())\n                encoded_data = self._encode(messages + [self.not_finished],\n                                            encode_empty=unstored_messages)\n        self._update_cookie(encoded_data, response)\n        return unstored_messages\n\n    def _hash(self, value):\n        \"\"\"\n        Creates an HMAC/SHA1 hash based on the value and the project setting's\n        SECRET_KEY, modified to make it unique for the present purpose.\n        \"\"\"\n        key_salt = 'django.contrib.messages'\n        return salted_hmac(key_salt, value).hexdigest()\n\n    def _encode(self, messages, encode_empty=False):\n        \"\"\"\n        Returns an encoded version of the messages list which can be stored as\n        plain text.\n\n        Since the data will be retrieved from the client-side, the encoded data\n        also contains a hash to ensure that the data was not tampered with.\n        \"\"\"\n        if messages or encode_empty:\n            encoder = MessageEncoder(separators=(',', ':'))\n            value = encoder.encode(messages)\n            return '%s$%s' % (self._hash(value), value)\n\n    def _decode(self, data):\n        \"\"\"\n        Safely decodes an encoded text stream back into a list of messages.\n\n        If the encoded text stream contained an invalid hash or was in an\n        invalid format, ``None`` is returned.\n        \"\"\"\n        if not data:\n            return None\n        bits = data.split('$', 1)\n        if len(bits) == 2:\n            hash, value = bits\n            if constant_time_compare(hash, self._hash(value)):\n                try:\n                    # If we get here (and the JSON decode works), everything is\n                    # good. In any other case, drop back and return None.\n                    return json.loads(value, cls=MessageDecoder)\n                except ValueError:\n                    pass\n        # Mark the data as used (so it gets removed) since something was wrong\n        # with the data.\n        self.used = True\n        return None\n", 4096) = 2464
11024 read(7, "", 4096)                 = 0
11024 unlink("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/cookie.pyc") = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/cookie.pyc", O_WRONLY|O_CREAT|O_EXCL|O_TRUNC|O_LARGEFILE, 0100644) = -1 EACCES (Permission denied)
11024 stat64("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/json", 0xb63b9b6c) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/json.i386-linux-gnu.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/json.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/jsonmodule.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/json.py", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/json.pyc", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 close(7)                          = 0
11024 stat64("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/session", 0xb63b9f1c) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/session.i386-linux-gnu.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/session.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/sessionmodule.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/session.py", O_RDONLY|O_LARGEFILE) = 7
11024 fstat64(7, {st_dev=makedev(8, 1), st_ino=566572, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=50, st_blksize=4096, st_blocks=8, st_size=1795, st_atime=2018/04/23-18:55:33.415856832, st_mtime=2018/04/23-18:05:33.115286000, st_ctime=2018/04/23-18:05:35.995184927}) = 0
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/session.pyc", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 fstat64(7, {st_dev=makedev(8, 1), st_ino=566572, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=50, st_blksize=4096, st_blocks=8, st_size=1795, st_atime=2018/04/23-18:55:33.415856832, st_mtime=2018/04/23-18:05:33.115286000, st_ctime=2018/04/23-18:05:35.995184927}) = 0
11024 read(7, "import json\n\nfrom django.conf import settings\nfrom django.contrib.messages.storage.base import BaseStorage\nfrom django.contrib.messages.storage.cookie import (\n    MessageDecoder, MessageEncoder,\n)\nfrom django.utils import six\n\n\nclass SessionStorage(BaseStorage):\n    \"\"\"\n    Stores messages in the session (that is, django.contrib.sessions).\n    \"\"\"\n    session_key = '_messages'\n\n    def __init__(self, request, *args, **kwargs):\n        assert hasattr(request, 'session'), \"The session-based temporary \"\\\n            \"message storage requires session middleware to be installed, \"\\\n            \"and come before the message middleware in the \"\\\n            \"MIDDLEWARE%s list.\" % (\"_CLASSES\" if settings.MIDDLEWARE is None else \"\")\n        super(SessionStorage, self).__init__(request, *args, **kwargs)\n\n    def _get(self, *args, **kwargs):\n        \"\"\"\n        Retrieves a list of messages from the request's session.  This storage\n        always stores everything it is given, so return True for the\n        all_retrieved flag.\n        \"\"\"\n        return self.deserialize_messages(self.request.session.get(self.session_key)), True\n\n    def _store(self, messages, response, *args, **kwargs):\n        \"\"\"\n        Stores a list of messages to the request's session.\n        \"\"\"\n        if messages:\n            self.request.session[self.session_key] = self.serialize_messages(messages)\n        else:\n            self.request.session.pop(self.session_key, None)\n        return []\n\n    def serialize_messages(self, messages):\n        encoder = MessageEncoder(separators=(',', ':'))\n        return encoder.encode(messages)\n\n    def deserialize_messages(self, data):\n        if data and isinstance(data, six.string_types):\n            return json.loads(data, cls=MessageDecoder)\n        return data\n", 4096) = 1795
11024 read(7, "", 4096)                 = 0
11024 unlink("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/session.pyc") = -1 ENOENT (No such file or directory)
11024 open("/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/session.pyc", O_WRONLY|O_CREAT|O_EXCL|O_TRUNC|O_LARGEFILE, 0100644) = -1 EACCES (Permission denied)
11024 close(7)                          = 0
11024 close(6)                          = 0
11024 stat64("/usr/lib/python2.7/encodings/latin_1", 0xb63b8cac) = -1 ENOENT (No such file or directory)
11024 open("/usr/lib/python2.7/encodings/latin_1.i386-linux-gnu.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/lib/python2.7/encodings/latin_1.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/lib/python2.7/encodings/latin_1module.so", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 open("/usr/lib/python2.7/encodings/latin_1.py", O_RDONLY|O_LARGEFILE) = 6
11024 fstat64(6, {st_dev=makedev(8, 1), st_ino=396700, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=0, st_blksize=4096, st_blocks=8, st_size=1264, st_atime=2018/02/21-11:36:18.066259785, st_mtime=2017/12/04-10:20:23, st_ctime=2018/02/21-11:35:51.376299160}) = 0
11024 open("/usr/lib/python2.7/encodings/latin_1.pyc", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
11024 fstat64(6, {st_dev=makedev(8, 1), st_ino=396700, st_mode=S_IFREG|0644, st_nlink=1, st_uid=0, st_gid=0, st_blksize=4096, st_blocks=8, st_size=1264, st_atime=2018/02/21-11:36:18.066259785, st_mtime=2017/12/04-10:20:23, st_ctime=2018/02/21-11:35:51.376299160}) = 0
11024 read(6, "\"\"\" Python 'latin-1' Codec\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n\"\"\"\nimport codecs\n\n### Codec APIs\n\nclass Codec(codecs.Codec):\n\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.latin_1_encode\n    decode = codecs.latin_1_decode\n\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.latin_1_encode(input,self.errors)[0]\n\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.latin_1_decode(input,self.errors)[0]\n\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\n\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n\nclass StreamConverter(StreamWriter,StreamReader):\n\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n\n### encodings module API\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n", 4096) = 1264
11024 read(6, "", 4096)                 = 0
11024 unlink("/usr/lib/python2.7/encodings/latin_1.pyc") = -1 ENOENT (No such file or directory)
11024 open("/usr/lib/python2.7/encodings/latin_1.pyc", O_WRONLY|O_CREAT|O_EXCL|O_TRUNC|O_LARGEFILE, 0100644) = -1 EACCES (Permission denied)
11024 close(6)                          = 0
11024 send(5, "HTTP/1.0 200 OK\r\n", 17, 0) = 17
11024 send(5, "Date: Tue, 24 Apr 2018 02:20:34 GMT\r\n", 37, 0) = 37
11024 send(5, "Server: WSGIServer/0.1 Python/2.7.12\r\n", 38, 0) = 38
11024 send(5, "X-Frame-Options: SAMEORIGIN\r\nContent-Type: text/html\r\nContent-Length: 1716\r\n\r\n", 78, 0) = 78
11024 send(5, "\n<!DOCTYPE html>\n<html lang=\"en\"><head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta name=\"robots\" content=\"NONE,NOARCHIVE\"><title>Welcome to Django</title>\n  <style type=\"text/css\">\n    html * { padding:0; margin:0; }\n    body * { padding:10px 20px; }\n    body * * { padding:0; }\n    body { font:small sans-serif; }\n    body>div { border-bottom:1px solid #ddd; }\n    h1 { font-weight:normal; }\n    h2 { margin-bottom:.8em; }\n    h2 span { font-size:80%; color:#666; font-weight:normal; }\n    h3 { margin:1em 0 .5em 0; }\n    h4 { margin:0 0 .5em 0; font-weight: normal; }\n    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }\n    tbody td, tbody th { vertical-align:top; padding:2px 3px; }\n    thead th {\n      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;\n      font-weight:normal; font-size:11px; border:1px solid #ddd;\n    }\n    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }\n    #summary { background: #e0ebff; }\n    #summary h2 { font-weight: normal; color: #666; }\n    #explanation { background:#eee; }\n    #instructions { background:#f6f6f6; }\n    #summary table { border:none; background:transparent; }\n  </style>\n</head>\n\n<body>\n<div id=\"summary\">\n  <h1>It worked!</h1>\n  <h2>Congratulations on your first Django-powered page.</h2>\n</div>\n\n<div id=\"instructions\">\n  <p>\n    Next, start your first app by running <code>python manage.py startapp [app_label]</code>.\n  </p>\n</div>\n\n<div id=\"explanation\">\n  <p>\n    You're seeing this message because you have <code>DEBUG = True</code> in your Django settings file and you haven't configured any URLs. Get to work!\n  </p>\n</div>\n</body></html>\n", 1716, 0) = 1716
11024 write(2, "[24/Apr/2018 02:20:34] \33[m\"GET / HTTP/1.1\" 200 1716\33[0m\n", 56) = 56
11024 shutdown(5, SHUT_WR)              = 0
11024 close(5)                          = 0
